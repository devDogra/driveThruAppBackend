customers make orders from the app
emps see made orders on the app
they prepare the order
and when they deliver it to the drive thru window they mark it as delivered after the
customer ***PAYS IN CASH***

** admin have FULL ACCESS to all routes and functionalities **

------------------------------------------------
    all these api calls have a lot of repetition even for diff resources....
    for eg: there's always a valid id check and stuff and the same
    resps being sent, the only diff being the name of the resource
    in the resp msgs 
------------------------------------------------

[ ] cant make/create an empty order (with no menu items). have the api disallow the creation of this
[x] add to orders who made that order
[ ] menu items in orders' items [] must be references, because if they'renot
    then the user could create an order and have the price be changed

[ ] orders api
    [x] create order (customers can, admin can)
    [x] delete order (customers can cancel orders within 5 mins of making them)
                    (potentially employees could also do this)
                    (but have to keep track of cancelled/deleted orders...???? so should we soft delete ie just mark em as cancelled?)
    [ ] put/patch order (both partial updates) (customers can within 5 mins of making them)
                        (emps could potentially do this too after approval from cust, but that's for later)
    [ ] get order (customers, emp both can

[x] menu items api
    [x] GET (customer, emp, admin)
        GET /menuItems/ => all items
        GET /menuItems/:id
    [x] POST (admin; only admin can add new items to the menu)
        [x] cant create same item number items
    [x] PUT (also handles partial updates) (admin) note: mongoose ignores updates to fields not defined in the schema
    [x] DELETE (admin)
            
[x] users api
    [x] GET (customer, emp, admin)
    [x] PUT/PATCH (customer [can edit his own details])
    [x] DELETE (customer, admin)
    [x] POST (**handled in registration**)

[ ] add authentication
[ ] add user roles
[ ] protect routes acesss by role